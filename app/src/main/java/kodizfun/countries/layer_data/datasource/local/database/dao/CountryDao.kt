package kodizfun.countries.layer_data.datasource.local.database.dao

import androidx.room.*
import kodizfun.countries.layer_data.datasource.local.model.LocalDataCountry

@Dao
interface CountryDao {

    /**
     * Insert an country in DB
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    fun insertCountry(localDataCountry: LocalDataCountry)

    /**
     * Delete an country from DB
     */
    @Query("DELETE FROM favorite WHERE code LIKE :countryCode")
    fun deleteCountry(countryCode: String)

    /**
     * Get a country in DB by its code
     */
    @Query("SELECT * FROM favorite WHERE code LIKE :countryCode")
    fun getCountryByCode(countryCode: String): LocalDataCountry

    /*
    /**
     * Get all users in DB and return a LiveData of list of users
     * Usage : dao.getAlUsers().observe(this, Observer {users -> ...})
     */
    @Query("SELECT * FROM users")
    fun getAlUsers(): LiveData<List<LocalDataCountry>>

    /**
     * Get user in DB then return a LiveData of User
     * Usage : dao.getUserById(id).observe(this, Observer {user -> ...})
     */
    @Query("SELECT * FROM users WHERE id = :userId")
    fun getUserById(userId: Int): LiveData<LocalDataCountry>

    /**
     * Get all users in DB by the name and the minAge, then return a LiveData of list of users
     * Usage : dao.getUserByNameAndAge("bob", 12).observe(this, Observer {users -> ...})
     */
    @Query("SELECT * FROM users WHERE name LIKE :name AND age >= :minAge")
    fun getUserByNameAndAge(name: String, minAge: Int): LiveData<List<LocalDataCountry>>

    /**
     * Insert an user in DB
     */
    @Insert
    fun insertUser(localDataCountry: LocalDataCountry)

    /**
     * Insert an user in DB then return the autogenerated id
     */
    @Insert
    fun insertUserReturnId(localDataCountry: LocalDataCountry): Long

    /**
     * Insert multiple users then return their autogenerated id
     * Conflicts handler
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    fun insertUsersReturnIds(localDataCountries: List<LocalDataCountry>): List<Long>

    /**
     * Insert multiple users using vararg
     * Usage : dao.insertUsers(user1, user2, ...)
     */
    @Insert
    fun insertUsers(vararg localDataCountries: LocalDataCountry)

    /**
     * Update an user in DB
     */
    @Update
    fun updateUser(localDataCountry: LocalDataCountry)


    /**
     * Update multiple users in DB using vararg
     * Usage : dao.updateUsers(user1, user2, ...)
     */
    @Update
    fun updateUsers(vararg localDataCountries: LocalDataCountry)

    @Query(
        """
        SELECT * FROM addresses
        WHERE id = :id
    """
    )
    suspend fun getAddressById(id: Int): LocalDataAddress

     */
}